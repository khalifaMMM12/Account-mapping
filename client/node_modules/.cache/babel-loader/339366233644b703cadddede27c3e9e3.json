{"ast":null,"code":"import { useEffect, useRef } from 'react';\n/**\r\n * Runs an effect only when the dependencies have changed, skipping the\r\n * initial \"on mount\" run. Caution, if the dependency list never changes,\r\n * the effect is **never run**\r\n *\r\n * ```ts\r\n *  const ref = useRef<HTMLInput>(null);\r\n *\r\n *  // focuses an element only if the focus changes, and not on mount\r\n *  useUpdateEffect(() => {\r\n *    const element = ref.current?.children[focusedIdx] as HTMLElement\r\n *\r\n *    element?.focus()\r\n *\r\n *  }, [focusedIndex])\r\n * ```\r\n * @param effect An effect to run on mount\r\n *\r\n * @category effects\r\n */\n\nfunction useUpdateEffect(fn, deps) {\n  const isFirst = useRef(true);\n  useEffect(() => {\n    if (isFirst.current) {\n      isFirst.current = false;\n      return;\n    }\n\n    return fn();\n  }, deps);\n}\n\nexport default useUpdateEffect;","map":{"version":3,"sources":["C:/Users/DEV. mmm/Documents/projects/Premium Pension/Agent mapping/Account-mapping/client/node_modules/react-bootstrap/node_modules/@restart/hooks/esm/useUpdateEffect.js"],"names":["useEffect","useRef","useUpdateEffect","fn","deps","isFirst","current"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,CAAyBC,EAAzB,EAA6BC,IAA7B,EAAmC;AACjC,QAAMC,OAAO,GAAGJ,MAAM,CAAC,IAAD,CAAtB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,OAAO,CAACC,OAAZ,EAAqB;AACnBD,MAAAA,OAAO,CAACC,OAAR,GAAkB,KAAlB;AACA;AACD;;AACD,WAAOH,EAAE,EAAT;AACD,GANQ,EAMNC,IANM,CAAT;AAOD;;AACD,eAAeF,eAAf","sourcesContent":["import { useEffect, useRef } from 'react';\r\n\r\n/**\r\n * Runs an effect only when the dependencies have changed, skipping the\r\n * initial \"on mount\" run. Caution, if the dependency list never changes,\r\n * the effect is **never run**\r\n *\r\n * ```ts\r\n *  const ref = useRef<HTMLInput>(null);\r\n *\r\n *  // focuses an element only if the focus changes, and not on mount\r\n *  useUpdateEffect(() => {\r\n *    const element = ref.current?.children[focusedIdx] as HTMLElement\r\n *\r\n *    element?.focus()\r\n *\r\n *  }, [focusedIndex])\r\n * ```\r\n * @param effect An effect to run on mount\r\n *\r\n * @category effects\r\n */\r\nfunction useUpdateEffect(fn, deps) {\r\n  const isFirst = useRef(true);\r\n  useEffect(() => {\r\n    if (isFirst.current) {\r\n      isFirst.current = false;\r\n      return;\r\n    }\r\n    return fn();\r\n  }, deps);\r\n}\r\nexport default useUpdateEffect;"]},"metadata":{},"sourceType":"module"}