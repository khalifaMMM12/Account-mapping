{"ast":null,"code":"import { useCallback, useState } from 'react';\n/**\r\n * Updates state, partial updates are merged into existing state values\r\n */\n\n/**\r\n * Mimics a React class component's state model, of having a single unified\r\n * `state` object and an updater that merges updates into the existing state, as\r\n * opposed to replacing it.\r\n *\r\n * ```js\r\n * const [state, setState] = useMergeState({ name: 'Betsy', age: 24 })\r\n *\r\n * setState({ name: 'Johan' }) // { name: 'Johan', age: 24 }\r\n *\r\n * setState(state => ({ age: state.age + 10 })) // { name: 'Johan', age: 34 }\r\n * ```\r\n *\r\n * @param initialState The initial state object\r\n */\n\nexport default function useMergeState(initialState) {\n  const [state, setState] = useState(initialState);\n  const updater = useCallback(update => {\n    if (update === null) return;\n\n    if (typeof update === 'function') {\n      setState(state => {\n        const nextState = update(state);\n        return nextState == null ? state : Object.assign({}, state, nextState);\n      });\n    } else {\n      setState(state => Object.assign({}, state, update));\n    }\n  }, [setState]);\n  return [state, updater];\n}","map":{"version":3,"sources":["C:/Users/DEV. mmm/Documents/projects/Premium Pension/Agent mapping/Account-mapping/client/node_modules/@restart/ui/node_modules/@restart/hooks/esm/useMergeState.js"],"names":["useCallback","useState","useMergeState","initialState","state","setState","updater","update","nextState","Object","assign"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,aAAT,CAAuBC,YAAvB,EAAqC;AAClD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAACE,YAAD,CAAlC;AACA,QAAMG,OAAO,GAAGN,WAAW,CAACO,MAAM,IAAI;AACpC,QAAIA,MAAM,KAAK,IAAf,EAAqB;;AACrB,QAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;AAChCF,MAAAA,QAAQ,CAACD,KAAK,IAAI;AAChB,cAAMI,SAAS,GAAGD,MAAM,CAACH,KAAD,CAAxB;AACA,eAAOI,SAAS,IAAI,IAAb,GAAoBJ,KAApB,GAA4BK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,KAAlB,EAAyBI,SAAzB,CAAnC;AACD,OAHO,CAAR;AAID,KALD,MAKO;AACLH,MAAAA,QAAQ,CAACD,KAAK,IAAIK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,KAAlB,EAAyBG,MAAzB,CAAV,CAAR;AACD;AACF,GAV0B,EAUxB,CAACF,QAAD,CAVwB,CAA3B;AAWA,SAAO,CAACD,KAAD,EAAQE,OAAR,CAAP;AACD","sourcesContent":["import { useCallback, useState } from 'react';\r\n\r\n/**\r\n * Updates state, partial updates are merged into existing state values\r\n */\r\n\r\n/**\r\n * Mimics a React class component's state model, of having a single unified\r\n * `state` object and an updater that merges updates into the existing state, as\r\n * opposed to replacing it.\r\n *\r\n * ```js\r\n * const [state, setState] = useMergeState({ name: 'Betsy', age: 24 })\r\n *\r\n * setState({ name: 'Johan' }) // { name: 'Johan', age: 24 }\r\n *\r\n * setState(state => ({ age: state.age + 10 })) // { name: 'Johan', age: 34 }\r\n * ```\r\n *\r\n * @param initialState The initial state object\r\n */\r\nexport default function useMergeState(initialState) {\r\n  const [state, setState] = useState(initialState);\r\n  const updater = useCallback(update => {\r\n    if (update === null) return;\r\n    if (typeof update === 'function') {\r\n      setState(state => {\r\n        const nextState = update(state);\r\n        return nextState == null ? state : Object.assign({}, state, nextState);\r\n      });\r\n    } else {\r\n      setState(state => Object.assign({}, state, update));\r\n    }\r\n  }, [setState]);\r\n  return [state, updater];\r\n}"]},"metadata":{},"sourceType":"module"}