{"ast":null,"code":"\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport warning from 'warning';\nimport Feedback from './Feedback';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst FormControl = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    bsPrefix,\n    type,\n    size,\n    htmlSize,\n    id,\n    className,\n    isValid = false,\n    isInvalid = false,\n    plaintext,\n    readOnly,\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'input',\n    ...props\n  } = _ref;\n  const {\n    controlId\n  } = useContext(FormContext);\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-control');\n  process.env.NODE_ENV !== \"production\" ? warning(controlId == null || !id, '`controlId` is ignored on `<FormControl>` when `id` is specified.') : void 0;\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    type: type,\n    size: htmlSize,\n    ref: ref,\n    readOnly: readOnly,\n    id: id || controlId,\n    className: classNames(className, plaintext ? `${bsPrefix}-plaintext` : bsPrefix, size && `${bsPrefix}-${size}`, type === 'color' && `${bsPrefix}-color`, isValid && 'is-valid', isInvalid && 'is-invalid')\n  });\n});\nFormControl.displayName = 'FormControl';\nexport default Object.assign(FormControl, {\n  Feedback\n});","map":{"version":3,"sources":["C:/Users/DEV. mmm/Documents/projects/Premium Pension/Agent mapping/Account-mapping/client/node_modules/react-bootstrap/esm/FormControl.js"],"names":["classNames","React","useContext","warning","Feedback","FormContext","useBootstrapPrefix","jsx","_jsx","FormControl","forwardRef","ref","bsPrefix","type","size","htmlSize","id","className","isValid","isInvalid","plaintext","readOnly","as","Component","props","controlId","process","env","NODE_ENV","displayName","Object","assign"],"mappings":"AAAA;;AAEA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,MAAMC,WAAW,GAAG,aAAaR,KAAK,CAACS,UAAN,CAAiB,OAc/CC,GAd+C,KAcvC;AAAA,MAdwC;AACjDC,IAAAA,QADiD;AAEjDC,IAAAA,IAFiD;AAGjDC,IAAAA,IAHiD;AAIjDC,IAAAA,QAJiD;AAKjDC,IAAAA,EALiD;AAMjDC,IAAAA,SANiD;AAOjDC,IAAAA,OAAO,GAAG,KAPuC;AAQjDC,IAAAA,SAAS,GAAG,KARqC;AASjDC,IAAAA,SATiD;AAUjDC,IAAAA,QAViD;AAWjD;AACAC,IAAAA,EAAE,EAAEC,SAAS,GAAG,OAZiC;AAajD,OAAGC;AAb8C,GAcxC;AACT,QAAM;AACJC,IAAAA;AADI,MAEFvB,UAAU,CAACG,WAAD,CAFd;AAGAO,EAAAA,QAAQ,GAAGN,kBAAkB,CAACM,QAAD,EAAW,cAAX,CAA7B;AACAc,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCzB,OAAO,CAACsB,SAAS,IAAI,IAAb,IAAqB,CAACT,EAAvB,EAA2B,mEAA3B,CAA/C,GAAiJ,KAAK,CAAtJ;AACA,SAAO,aAAaR,IAAI,CAACe,SAAD,EAAY,EAClC,GAAGC,KAD+B;AAElCX,IAAAA,IAAI,EAAEA,IAF4B;AAGlCC,IAAAA,IAAI,EAAEC,QAH4B;AAIlCJ,IAAAA,GAAG,EAAEA,GAJ6B;AAKlCU,IAAAA,QAAQ,EAAEA,QALwB;AAMlCL,IAAAA,EAAE,EAAEA,EAAE,IAAIS,SANwB;AAOlCR,IAAAA,SAAS,EAAEjB,UAAU,CAACiB,SAAD,EAAYG,SAAS,GAAI,GAAER,QAAS,YAAf,GAA6BA,QAAlD,EAA4DE,IAAI,IAAK,GAAEF,QAAS,IAAGE,IAAK,EAAxF,EAA2FD,IAAI,KAAK,OAAT,IAAqB,GAAED,QAAS,QAA3H,EAAoIM,OAAO,IAAI,UAA/I,EAA2JC,SAAS,IAAI,YAAxK;AAPa,GAAZ,CAAxB;AASD,CA7BgC,CAAjC;AA8BAV,WAAW,CAACoB,WAAZ,GAA0B,aAA1B;AACA,eAAeC,MAAM,CAACC,MAAP,CAActB,WAAd,EAA2B;AACxCL,EAAAA;AADwC,CAA3B,CAAf","sourcesContent":["\"use client\";\r\n\r\nimport classNames from 'classnames';\r\nimport * as React from 'react';\r\nimport { useContext } from 'react';\r\nimport warning from 'warning';\r\nimport Feedback from './Feedback';\r\nimport FormContext from './FormContext';\r\nimport { useBootstrapPrefix } from './ThemeProvider';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nconst FormControl = /*#__PURE__*/React.forwardRef(({\r\n  bsPrefix,\r\n  type,\r\n  size,\r\n  htmlSize,\r\n  id,\r\n  className,\r\n  isValid = false,\r\n  isInvalid = false,\r\n  plaintext,\r\n  readOnly,\r\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\r\n  as: Component = 'input',\r\n  ...props\r\n}, ref) => {\r\n  const {\r\n    controlId\r\n  } = useContext(FormContext);\r\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-control');\r\n  process.env.NODE_ENV !== \"production\" ? warning(controlId == null || !id, '`controlId` is ignored on `<FormControl>` when `id` is specified.') : void 0;\r\n  return /*#__PURE__*/_jsx(Component, {\r\n    ...props,\r\n    type: type,\r\n    size: htmlSize,\r\n    ref: ref,\r\n    readOnly: readOnly,\r\n    id: id || controlId,\r\n    className: classNames(className, plaintext ? `${bsPrefix}-plaintext` : bsPrefix, size && `${bsPrefix}-${size}`, type === 'color' && `${bsPrefix}-color`, isValid && 'is-valid', isInvalid && 'is-invalid')\r\n  });\r\n});\r\nFormControl.displayName = 'FormControl';\r\nexport default Object.assign(FormControl, {\r\n  Feedback\r\n});"]},"metadata":{},"sourceType":"module"}