{"ast":null,"code":"// regjsparser\n//\n// ==================================================================\n//\n// See ECMA-262 Standard: 15.10.1\n//\n// NOTE: The ECMA-262 standard uses the term \"Assertion\" for /^/. Here the\n//   term \"Anchor\" is used.\n//\n// Pattern ::\n//      Disjunction\n//\n// Disjunction ::\n//      Alternative\n//      Alternative | Disjunction\n//\n// Alternative ::\n//      [empty]\n//      Alternative Term\n//\n// Term ::\n//      Anchor\n//      Atom\n//      Atom Quantifier\n//\n// Anchor ::\n//      ^\n//      $\n//      \\ b\n//      \\ B\n//      ( ? = Disjunction )\n//      ( ? ! Disjunction )\n//      ( ? < = Disjunction )\n//      ( ? < ! Disjunction )\n//\n// Quantifier ::\n//      QuantifierPrefix\n//      QuantifierPrefix ?\n//\n// QuantifierPrefix ::\n//      *\n//      +\n//      ?\n//      { DecimalDigits }\n//      { DecimalDigits , }\n//      { DecimalDigits , DecimalDigits }\n//\n// Atom ::\n//      PatternCharacter\n//      .\n//      \\ AtomEscape\n//      CharacterClass\n//      ( GroupSpecifier Disjunction )\n//      ( ? : Disjunction )\n//\n// PatternCharacter ::\n//      SourceCharacter but not any of: ^ $ \\ . * + ? ( ) [ ] { } |\n//\n// AtomEscape ::\n//      DecimalEscape\n//      CharacterEscape\n//      CharacterClassEscape\n//      k GroupName\n//\n// CharacterEscape[U] ::\n//      ControlEscape\n//      c ControlLetter\n//      HexEscapeSequence\n//      RegExpUnicodeEscapeSequence[?U] (ES6)\n//      IdentityEscape[?U]\n//\n// ControlEscape ::\n//      one of f n r t v\n// ControlLetter ::\n//      one of\n//          a b c d e f g h i j k l m n o p q r s t u v w x y z\n//          A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n//\n// IdentityEscape ::\n//      SourceCharacter but not c\n//\n// DecimalEscape ::\n//      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]\n//\n// CharacterClassEscape ::\n//      one of d D s S w W\n//\n// CharacterClass ::\n//      [ [lookahead ∉ {^}] ClassRanges ]\n//      [ ^ ClassRanges ]\n//\n// ClassRanges ::\n//      [empty]\n//      NonemptyClassRanges\n//\n// NonemptyClassRanges ::\n//      ClassAtom\n//      ClassAtom NonemptyClassRangesNoDash\n//      ClassAtom - ClassAtom ClassRanges\n//\n// NonemptyClassRangesNoDash ::\n//      ClassAtom\n//      ClassAtomNoDash NonemptyClassRangesNoDash\n//      ClassAtomNoDash - ClassAtom ClassRanges\n//\n// ClassAtom ::\n//      -\n//      ClassAtomNoDash\n//\n// ClassAtomNoDash ::\n//      SourceCharacter but not one of \\ or ] or -\n//      \\ ClassEscape\n//\n// ClassEscape ::\n//      DecimalEscape\n//      b\n//      CharacterEscape\n//      CharacterClassEscape\n//\n// GroupSpecifier ::\n//      [empty]\n//      ? GroupName\n//\n// GroupName ::\n//      < RegExpIdentifierName >\n//\n// RegExpIdentifierName ::\n//      RegExpIdentifierStart\n//      RegExpIdentifierName RegExpIdentifierContinue\n//\n// RegExpIdentifierStart ::\n//      UnicodeIDStart\n//      $\n//      _\n//      \\ RegExpUnicodeEscapeSequence\n//\n// RegExpIdentifierContinue ::\n//      UnicodeIDContinue\n//      $\n//      _\n//      \\ RegExpUnicodeEscapeSequence\n//      <ZWNJ>\n//      <ZWJ>\n(function () {\n  var fromCodePoint = String.fromCodePoint || function () {\n    // Implementation taken from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\n    var stringFromCharCode = String.fromCharCode;\n    var floor = Math.floor;\n    return function fromCodePoint() {\n      var MAX_SIZE = 0x4000;\n      var codeUnits = [];\n      var highSurrogate;\n      var lowSurrogate;\n      var index = -1;\n      var length = arguments.length;\n\n      if (!length) {\n        return '';\n      }\n\n      var result = '';\n\n      while (++index < length) {\n        var codePoint = Number(arguments[index]);\n\n        if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n        codePoint < 0 || // not a valid Unicode code point\n        codePoint > 0x10FFFF || // not a valid Unicode code point\n        floor(codePoint) != codePoint // not an integer\n        ) {\n          throw RangeError('Invalid code point: ' + codePoint);\n        }\n\n        if (codePoint <= 0xFFFF) {\n          // BMP code point\n          codeUnits.push(codePoint);\n        } else {\n          // Astral code point; split in surrogate halves\n          // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n          codePoint -= 0x10000;\n          highSurrogate = (codePoint >> 10) + 0xD800;\n          lowSurrogate = codePoint % 0x400 + 0xDC00;\n          codeUnits.push(highSurrogate, lowSurrogate);\n        }\n\n        if (index + 1 == length || codeUnits.length > MAX_SIZE) {\n          result += stringFromCharCode.apply(null, codeUnits);\n          codeUnits.length = 0;\n        }\n      }\n\n      return result;\n    };\n  }();\n\n  function parse(str, flags, features) {\n    if (!features) {\n      features = {};\n    }\n\n    function addRaw(node) {\n      node.raw = str.substring(node.range[0], node.range[1]);\n      return node;\n    }\n\n    function updateRawStart(node, start) {\n      node.range[0] = start;\n      return addRaw(node);\n    }\n\n    function createAnchor(kind, rawLength) {\n      return addRaw({\n        type: 'anchor',\n        kind: kind,\n        range: [pos - rawLength, pos]\n      });\n    }\n\n    function createValue(kind, codePoint, from, to) {\n      return addRaw({\n        type: 'value',\n        kind: kind,\n        codePoint: codePoint,\n        range: [from, to]\n      });\n    }\n\n    function createEscaped(kind, codePoint, value, fromOffset) {\n      fromOffset = fromOffset || 0;\n      return createValue(kind, codePoint, pos - (value.length + fromOffset), pos);\n    }\n\n    function createCharacter(matches) {\n      var _char = matches[0];\n\n      var first = _char.charCodeAt(0);\n\n      if (hasUnicodeFlag) {\n        var second;\n\n        if (_char.length === 1 && first >= 0xD800 && first <= 0xDBFF) {\n          second = lookahead().charCodeAt(0);\n\n          if (second >= 0xDC00 && second <= 0xDFFF) {\n            // Unicode surrogate pair\n            pos++;\n            return createValue('symbol', (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000, pos - 2, pos);\n          }\n        }\n      }\n\n      return createValue('symbol', first, pos - 1, pos);\n    }\n\n    function createDisjunction(alternatives, from, to) {\n      return addRaw({\n        type: 'disjunction',\n        body: alternatives,\n        range: [from, to]\n      });\n    }\n\n    function createDot() {\n      return addRaw({\n        type: 'dot',\n        range: [pos - 1, pos]\n      });\n    }\n\n    function createCharacterClassEscape(value) {\n      return addRaw({\n        type: 'characterClassEscape',\n        value: value,\n        range: [pos - 2, pos]\n      });\n    }\n\n    function createReference(matchIndex) {\n      return addRaw({\n        type: 'reference',\n        matchIndex: parseInt(matchIndex, 10),\n        range: [pos - 1 - matchIndex.length, pos]\n      });\n    }\n\n    function createNamedReference(name) {\n      return addRaw({\n        type: 'reference',\n        name: name,\n        range: [name.range[0] - 3, pos]\n      });\n    }\n\n    function createGroup(behavior, disjunction, from, to) {\n      return addRaw({\n        type: 'group',\n        behavior: behavior,\n        body: disjunction,\n        range: [from, to]\n      });\n    }\n\n    function createQuantifier(min, max, from, to) {\n      if (to == null) {\n        from = pos - 1;\n        to = pos;\n      }\n\n      return addRaw({\n        type: 'quantifier',\n        min: min,\n        max: max,\n        greedy: true,\n        body: null,\n        // set later on\n        range: [from, to]\n      });\n    }\n\n    function createAlternative(terms, from, to) {\n      return addRaw({\n        type: 'alternative',\n        body: terms,\n        range: [from, to]\n      });\n    }\n\n    function createCharacterClass(classRanges, negative, from, to) {\n      return addRaw({\n        type: 'characterClass',\n        body: classRanges,\n        negative: negative,\n        range: [from, to]\n      });\n    }\n\n    function createClassRange(min, max, from, to) {\n      // See 15.10.2.15:\n      if (min.codePoint > max.codePoint) {\n        bail('invalid range in character class', min.raw + '-' + max.raw, from, to);\n      }\n\n      return addRaw({\n        type: 'characterClassRange',\n        min: min,\n        max: max,\n        range: [from, to]\n      });\n    }\n\n    function flattenBody(body) {\n      if (body.type === 'alternative') {\n        return body.body;\n      } else {\n        return [body];\n      }\n    }\n\n    function isEmpty(obj) {\n      return obj.type === 'empty';\n    }\n\n    function incr(amount) {\n      amount = amount || 1;\n      var res = str.substring(pos, pos + amount);\n      pos += amount || 1;\n      return res;\n    }\n\n    function skip(value) {\n      if (!match(value)) {\n        bail('character', value);\n      }\n    }\n\n    function match(value) {\n      if (str.indexOf(value, pos) === pos) {\n        return incr(value.length);\n      }\n    }\n\n    function lookahead() {\n      return str[pos];\n    }\n\n    function current(value) {\n      return str.indexOf(value, pos) === pos;\n    }\n\n    function next(value) {\n      return str[pos + 1] === value;\n    }\n\n    function matchReg(regExp) {\n      var subStr = str.substring(pos);\n      var res = subStr.match(regExp);\n\n      if (res) {\n        res.range = [];\n        res.range[0] = pos;\n        incr(res[0].length);\n        res.range[1] = pos;\n      }\n\n      return res;\n    }\n\n    function parseDisjunction() {\n      // Disjunction ::\n      //      Alternative\n      //      Alternative | Disjunction\n      var res = [],\n          from = pos;\n      res.push(parseAlternative());\n\n      while (match('|')) {\n        res.push(parseAlternative());\n      }\n\n      if (res.length === 1) {\n        return res[0];\n      }\n\n      return createDisjunction(res, from, pos);\n    }\n\n    function parseAlternative() {\n      var res = [],\n          from = pos;\n      var term; // Alternative ::\n      //      [empty]\n      //      Alternative Term\n\n      while (term = parseTerm()) {\n        res.push(term);\n      }\n\n      if (res.length === 1) {\n        return res[0];\n      }\n\n      return createAlternative(res, from, pos);\n    }\n\n    function parseTerm() {\n      // Term ::\n      //      Anchor\n      //      Atom\n      //      Atom Quantifier\n      if (pos >= str.length || current('|') || current(')')) {\n        return null;\n        /* Means: The term is empty */\n      }\n\n      var anchor = parseAnchor();\n\n      if (anchor) {\n        return anchor;\n      }\n\n      var atom = parseAtomAndExtendedAtom();\n\n      if (!atom) {\n        // Check if a quantifier is following. A quantifier without an atom\n        // is an error.\n        pos_backup = pos;\n        var quantifier = parseQuantifier() || false;\n\n        if (quantifier) {\n          pos = pos_backup;\n          bail('Expected atom');\n        } // If no unicode flag, then try to parse ExtendedAtom -> ExtendedPatternCharacter.\n        //      ExtendedPatternCharacter\n\n\n        if (!hasUnicodeFlag && (res = matchReg(/^{/))) {\n          atom = createCharacter(res);\n        } else {\n          bail('Expected atom');\n        }\n      }\n\n      var quantifier = parseQuantifier() || false;\n\n      if (quantifier) {\n        quantifier.body = flattenBody(atom); // The quantifier contains the atom. Therefore, the beginning of the\n        // quantifier range is given by the beginning of the atom.\n\n        updateRawStart(quantifier, atom.range[0]);\n        return quantifier;\n      }\n\n      return atom;\n    }\n\n    function parseGroup(matchA, typeA, matchB, typeB) {\n      var type = null,\n          from = pos;\n\n      if (match(matchA)) {\n        type = typeA;\n      } else if (match(matchB)) {\n        type = typeB;\n      } else {\n        return false;\n      }\n\n      return finishGroup(type, from);\n    }\n\n    function finishGroup(type, from) {\n      var body = parseDisjunction();\n\n      if (!body) {\n        bail('Expected disjunction');\n      }\n\n      skip(')');\n      var group = createGroup(type, flattenBody(body), from, pos);\n\n      if (type == 'normal') {\n        // Keep track of the number of closed groups. This is required for\n        // parseDecimalEscape(). In case the string is parsed a second time the\n        // value already holds the total count and no incrementation is required.\n        if (firstIteration) {\n          closedCaptureCounter++;\n        }\n      }\n\n      return group;\n    }\n\n    function parseAnchor() {\n      // Anchor ::\n      //      ^\n      //      $\n      //      \\ b\n      //      \\ B\n      //      ( ? = Disjunction )\n      //      ( ? ! Disjunction )\n      var res,\n          from = pos;\n\n      if (match('^')) {\n        return createAnchor('start', 1\n        /* rawLength */\n        );\n      } else if (match('$')) {\n        return createAnchor('end', 1\n        /* rawLength */\n        );\n      } else if (match('\\\\b')) {\n        return createAnchor('boundary', 2\n        /* rawLength */\n        );\n      } else if (match('\\\\B')) {\n        return createAnchor('not-boundary', 2\n        /* rawLength */\n        );\n      } else {\n        return parseGroup('(?=', 'lookahead', '(?!', 'negativeLookahead');\n      }\n    }\n\n    function parseQuantifier() {\n      // Quantifier ::\n      //      QuantifierPrefix\n      //      QuantifierPrefix ?\n      //\n      // QuantifierPrefix ::\n      //      *\n      //      +\n      //      ?\n      //      { DecimalDigits }\n      //      { DecimalDigits , }\n      //      { DecimalDigits , DecimalDigits }\n      var res,\n          from = pos;\n      var quantifier;\n      var min, max;\n\n      if (match('*')) {\n        quantifier = createQuantifier(0);\n      } else if (match('+')) {\n        quantifier = createQuantifier(1);\n      } else if (match('?')) {\n        quantifier = createQuantifier(0, 1);\n      } else if (res = matchReg(/^\\{([0-9]+)\\}/)) {\n        min = parseInt(res[1], 10);\n        quantifier = createQuantifier(min, min, res.range[0], res.range[1]);\n      } else if (res = matchReg(/^\\{([0-9]+),\\}/)) {\n        min = parseInt(res[1], 10);\n        quantifier = createQuantifier(min, undefined, res.range[0], res.range[1]);\n      } else if (res = matchReg(/^\\{([0-9]+),([0-9]+)\\}/)) {\n        min = parseInt(res[1], 10);\n        max = parseInt(res[2], 10);\n\n        if (min > max) {\n          bail('numbers out of order in {} quantifier', '', from, pos);\n        }\n\n        quantifier = createQuantifier(min, max, res.range[0], res.range[1]);\n      }\n\n      if (quantifier) {\n        if (match('?')) {\n          quantifier.greedy = false;\n          quantifier.range[1] += 1;\n        }\n      }\n\n      return quantifier;\n    }\n\n    function parseAtomAndExtendedAtom() {\n      // Parsing Atom and ExtendedAtom together due to redundancy.\n      // ExtendedAtom is defined in Apendix B of the ECMA-262 standard.\n      //\n      // SEE: https://www.ecma-international.org/ecma-262/10.0/index.html#prod-annexB-ExtendedPatternCharacter\n      //\n      // Atom ::\n      //      PatternCharacter\n      //      .\n      //      \\ AtomEscape\n      //      CharacterClass\n      //      ( GroupSpecifier Disjunction )\n      //      ( ? : Disjunction )\n      // ExtendedAtom ::\n      //      ExtendedPatternCharacter\n      // ExtendedPatternCharacter ::\n      //      SourceCharacter but not one of ^$\\.*+?()[|\n      var res; // jviereck: allow ']', '}' here as well to be compatible with browser's\n      //   implementations: ']'.match(/]/);\n\n      if (res = matchReg(/^[^^$\\\\.*+?()[\\]{}|]/)) {\n        //      PatternCharacter\n        return createCharacter(res);\n      } else if (!hasUnicodeFlag && (res = matchReg(/^(?:]|})/))) {\n        //      ExtendedPatternCharacter, first part. See parseTerm.\n        return createCharacter(res);\n      } else if (match('.')) {\n        //      .\n        return createDot();\n      } else if (match('\\\\')) {\n        //      \\ AtomEscape\n        res = parseAtomEscape();\n\n        if (!res) {\n          if (!hasUnicodeFlag && lookahead() == 'c') {\n            // B.1.4 ExtendedAtom\n            // \\[lookahead = c]\n            return createValue('symbol', 92, pos - 1, pos);\n          }\n\n          bail('atomEscape');\n        }\n\n        return res;\n      } else if (res = parseCharacterClass()) {\n        return res;\n      } else if (features.lookbehind && (res = parseGroup('(?<=', 'lookbehind', '(?<!', 'negativeLookbehind'))) {\n        return res;\n      } else if (features.namedGroups && match(\"(?<\")) {\n        var name = parseIdentifier();\n        skip(\">\");\n        var group = finishGroup(\"normal\", name.range[0] - 3);\n        group.name = name;\n        return group;\n      } else {\n        //      ( Disjunction )\n        //      ( ? : Disjunction )\n        return parseGroup('(?:', 'ignore', '(', 'normal');\n      }\n    }\n\n    function parseUnicodeSurrogatePairEscape(firstEscape) {\n      if (hasUnicodeFlag) {\n        var first, second;\n\n        if (firstEscape.kind == 'unicodeEscape' && (first = firstEscape.codePoint) >= 0xD800 && first <= 0xDBFF && current('\\\\') && next('u')) {\n          var prevPos = pos;\n          pos++;\n          var secondEscape = parseClassEscape();\n\n          if (secondEscape.kind == 'unicodeEscape' && (second = secondEscape.codePoint) >= 0xDC00 && second <= 0xDFFF) {\n            // Unicode surrogate pair\n            firstEscape.range[1] = secondEscape.range[1];\n            firstEscape.codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n            firstEscape.type = 'value';\n            firstEscape.kind = 'unicodeCodePointEscape';\n            addRaw(firstEscape);\n          } else {\n            pos = prevPos;\n          }\n        }\n      }\n\n      return firstEscape;\n    }\n\n    function parseClassEscape() {\n      return parseAtomEscape(true);\n    }\n\n    function parseAtomEscape(insideCharacterClass) {\n      // AtomEscape ::\n      //      DecimalEscape\n      //      CharacterEscape\n      //      CharacterClassEscape\n      //      k GroupName\n      var res,\n          from = pos;\n      res = parseDecimalEscape() || parseNamedReference();\n\n      if (res) {\n        return res;\n      } // For ClassEscape\n\n\n      if (insideCharacterClass) {\n        //     b\n        if (match('b')) {\n          // 15.10.2.19\n          // The production ClassEscape :: b evaluates by returning the\n          // CharSet containing the one character <BS> (Unicode value 0008).\n          return createEscaped('singleEscape', 0x0008, '\\\\b');\n        } else if (match('B')) {\n          bail('\\\\B not possible inside of CharacterClass', '', from);\n        } else if (!hasUnicodeFlag && (res = matchReg(/^c([0-9])/))) {\n          // B.1.4\n          // c ClassControlLetter, ClassControlLetter = DecimalDigit\n          return createEscaped('controlLetter', res[1] + 16, res[1], 2);\n        } else if (!hasUnicodeFlag && (res = matchReg(/^c_/))) {\n          // B.1.4\n          // c ClassControlLetter, ClassControlLetter = _\n          return createEscaped('controlLetter', 31, '_', 2);\n        } //     [+U] -\n\n\n        if (hasUnicodeFlag && match('-')) {\n          return createEscaped('singleEscape', 0x002d, '\\\\-');\n        }\n      }\n\n      res = parseCharacterEscape();\n      return res;\n    }\n\n    function parseDecimalEscape() {\n      // DecimalEscape ::\n      //      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]\n      //      CharacterClassEscape :: one of d D s S w W\n      var res, match;\n\n      if (res = matchReg(/^(?!0)\\d+/)) {\n        match = res[0];\n        var refIdx = parseInt(res[0], 10);\n\n        if (refIdx <= closedCaptureCounter) {\n          // If the number is smaller than the normal-groups found so\n          // far, then it is a reference...\n          return createReference(res[0]);\n        } else {\n          // ... otherwise it needs to be interpreted as a octal (if the\n          // number is in an octal format). If it is NOT octal format,\n          // then the slash is ignored and the number is matched later\n          // as normal characters.\n          // Recall the negative decision to decide if the input must be parsed\n          // a second time with the total normal-groups.\n          backrefDenied.push(refIdx); // Reset the position again, as maybe only parts of the previous\n          // matched numbers are actual octal numbers. E.g. in '019' only\n          // the '01' should be matched.\n\n          incr(-res[0].length);\n\n          if (res = matchReg(/^[0-7]{1,3}/)) {\n            return createEscaped('octal', parseInt(res[0], 8), res[0], 1);\n          } else {\n            // If we end up here, we have a case like /\\91/. Then the\n            // first slash is to be ignored and the 9 & 1 to be treated\n            // like ordinary characters. Create a character for the\n            // first number only here - other number-characters\n            // (if available) will be matched later.\n            res = createCharacter(matchReg(/^[89]/));\n            return updateRawStart(res, res.range[0] - 1);\n          }\n        }\n      } // Only allow octal numbers in the following. All matched numbers start\n      // with a zero (if the do not, the previous if-branch is executed).\n      // If the number is not octal format and starts with zero (e.g. `091`)\n      // then only the zeros `0` is treated here and the `91` are ordinary\n      // characters.\n      // Example:\n      //   /\\091/.exec('\\091')[0].length === 3\n      else if (res = matchReg(/^[0-7]{1,3}/)) {\n        match = res[0];\n\n        if (/^0{1,3}$/.test(match)) {\n          // If they are all zeros, then only take the first one.\n          return createEscaped('null', 0x0000, '0', match.length);\n        } else {\n          return createEscaped('octal', parseInt(match, 8), match, 1);\n        }\n      } else if (res = matchReg(/^[dDsSwW]/)) {\n        return createCharacterClassEscape(res[0]);\n      }\n\n      return false;\n    }\n\n    function parseNamedReference() {\n      if (features.namedGroups && matchReg(/^k<(?=.*?>)/)) {\n        var name = parseIdentifier();\n        skip('>');\n        return createNamedReference(name);\n      }\n    }\n\n    function parseRegExpUnicodeEscapeSequence() {\n      var res;\n\n      if (res = matchReg(/^u([0-9a-fA-F]{4})/)) {\n        // UnicodeEscapeSequence\n        return parseUnicodeSurrogatePairEscape(createEscaped('unicodeEscape', parseInt(res[1], 16), res[1], 2));\n      } else if (hasUnicodeFlag && (res = matchReg(/^u\\{([0-9a-fA-F]+)\\}/))) {\n        // RegExpUnicodeEscapeSequence (ES6 Unicode code point escape)\n        return createEscaped('unicodeCodePointEscape', parseInt(res[1], 16), res[1], 4);\n      }\n    }\n\n    function parseCharacterEscape() {\n      // CharacterEscape ::\n      //      ControlEscape\n      //      c ControlLetter\n      //      HexEscapeSequence\n      //      UnicodeEscapeSequence\n      //      IdentityEscape\n      var res;\n      var from = pos;\n\n      if (res = matchReg(/^[fnrtv]/)) {\n        // ControlEscape\n        var codePoint = 0;\n\n        switch (res[0]) {\n          case 't':\n            codePoint = 0x009;\n            break;\n\n          case 'n':\n            codePoint = 0x00A;\n            break;\n\n          case 'v':\n            codePoint = 0x00B;\n            break;\n\n          case 'f':\n            codePoint = 0x00C;\n            break;\n\n          case 'r':\n            codePoint = 0x00D;\n            break;\n        }\n\n        return createEscaped('singleEscape', codePoint, '\\\\' + res[0]);\n      } else if (res = matchReg(/^c([a-zA-Z])/)) {\n        // c ControlLetter\n        return createEscaped('controlLetter', res[1].charCodeAt(0) % 32, res[1], 2);\n      } else if (res = matchReg(/^x([0-9a-fA-F]{2})/)) {\n        // HexEscapeSequence\n        return createEscaped('hexadecimalEscape', parseInt(res[1], 16), res[1], 2);\n      } else if (res = parseRegExpUnicodeEscapeSequence()) {\n        if (!res || res.codePoint > 0x10FFFF) {\n          bail('Invalid escape sequence', null, from, pos);\n        }\n\n        return res;\n      } else if (features.unicodePropertyEscape && hasUnicodeFlag && (res = matchReg(/^([pP])\\{([^\\}]+)\\}/))) {\n        // https://github.com/jviereck/regjsparser/issues/77\n        return addRaw({\n          type: 'unicodePropertyEscape',\n          negative: res[1] === 'P',\n          value: res[2],\n          range: [res.range[0] - 1, res.range[1]],\n          raw: res[0]\n        });\n      } else {\n        // IdentityEscape\n        return parseIdentityEscape();\n      }\n    }\n\n    function parseIdentifierAtom(check) {\n      var ch = lookahead();\n      var from = pos;\n\n      if (ch === '\\\\') {\n        incr();\n        var esc = parseRegExpUnicodeEscapeSequence();\n\n        if (!esc || !check(esc.codePoint)) {\n          bail('Invalid escape sequence', null, from, pos);\n        }\n\n        return fromCodePoint(esc.codePoint);\n      }\n\n      var code = ch.charCodeAt(0);\n\n      if (code >= 0xD800 && code <= 0xDBFF) {\n        ch += str[pos + 1];\n        var second = ch.charCodeAt(1);\n\n        if (second >= 0xDC00 && second <= 0xDFFF) {\n          // Unicode surrogate pair\n          code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        }\n      }\n\n      if (!check(code)) return;\n      incr();\n      if (code > 0xFFFF) incr();\n      return ch;\n    }\n\n    function parseIdentifier() {\n      // RegExpIdentifierName ::\n      //      RegExpIdentifierStart\n      //      RegExpIdentifierName RegExpIdentifierContinue\n      //\n      // RegExpIdentifierStart ::\n      //      UnicodeIDStart\n      //      $\n      //      _\n      //      \\ RegExpUnicodeEscapeSequence\n      //\n      // RegExpIdentifierContinue ::\n      //      UnicodeIDContinue\n      //      $\n      //      _\n      //      \\ RegExpUnicodeEscapeSequence\n      //      <ZWNJ>\n      //      <ZWJ>\n      var start = pos;\n      var res = parseIdentifierAtom(isIdentifierStart);\n\n      if (!res) {\n        bail('Invalid identifier');\n      }\n\n      var ch;\n\n      while (ch = parseIdentifierAtom(isIdentifierPart)) {\n        res += ch;\n      }\n\n      return addRaw({\n        type: 'identifier',\n        value: res,\n        range: [start, pos]\n      });\n    }\n\n    function isIdentifierStart(ch) {\n      // Generated by `tools/generate-identifier-regex.js`.\n      var NonAsciiIdentifierStart = /[\\$A-Z_a-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7B9\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF1A]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFF1]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/;\n      return ch === 36 || ch === 95 || // $ (dollar) and _ (underscore)\n      ch >= 65 && ch <= 90 || // A..Z\n      ch >= 97 && ch <= 122 || // a..z\n      ch >= 0x80 && NonAsciiIdentifierStart.test(fromCodePoint(ch));\n    } // Taken from the Esprima parser.\n\n\n    function isIdentifierPart(ch) {\n      // Generated by `tools/generate-identifier-regex.js`.\n      var NonAsciiIdentifierPartOnly = /[0-9_\\xB7\\u0300-\\u036F\\u0387\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u0669\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07C0-\\u07C9\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096F\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09E6-\\u09EF\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A66-\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AE6-\\u0AEF\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B66-\\u0B6F\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C04\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CE6-\\u0CEF\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D66-\\u0D6F\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0E50-\\u0E59\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1040-\\u1049\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F-\\u109D\\u135D-\\u135F\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u194F\\u19D0-\\u19DA\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AB0-\\u1ABD\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BB0-\\u1BB9\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1C40-\\u1C49\\u1C50-\\u1C59\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u200C\\u200D\\u203F\\u2040\\u2054\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA620-\\uA629\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F1\\uA8FF-\\uA909\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9D0-\\uA9D9\\uA9E5\\uA9F0-\\uA9F9\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA50-\\uAA59\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF10-\\uFF19\\uFF3F]|\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD801[\\uDCA0-\\uDCA9]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD803[\\uDD24-\\uDD27\\uDD30-\\uDD39\\uDF46-\\uDF50]|\\uD804[\\uDC00-\\uDC02\\uDC38-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDC82\\uDCB0-\\uDCBA\\uDCF0-\\uDCF9\\uDD00-\\uDD02\\uDD27-\\uDD34\\uDD36-\\uDD3F\\uDD45\\uDD46\\uDD73\\uDD80-\\uDD82\\uDDB3-\\uDDC0\\uDDC9-\\uDDCC\\uDDD0-\\uDDD9\\uDE2C-\\uDE37\\uDE3E\\uDEDF-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF3B\\uDF3C\\uDF3E-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF62\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC35-\\uDC46\\uDC50-\\uDC59\\uDC5E\\uDCB0-\\uDCC3\\uDCD0-\\uDCD9\\uDDAF-\\uDDB5\\uDDB8-\\uDDC0\\uDDDC\\uDDDD\\uDE30-\\uDE40\\uDE50-\\uDE59\\uDEAB-\\uDEB7\\uDEC0-\\uDEC9\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDC2C-\\uDC3A\\uDCE0-\\uDCE9\\uDE01-\\uDE0A\\uDE33-\\uDE39\\uDE3B-\\uDE3E\\uDE47\\uDE51-\\uDE5B\\uDE8A-\\uDE99]|\\uD807[\\uDC2F-\\uDC36\\uDC38-\\uDC3F\\uDC50-\\uDC59\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD31-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD45\\uDD47\\uDD50-\\uDD59\\uDD8A-\\uDD8E\\uDD90\\uDD91\\uDD93-\\uDD97\\uDDA0-\\uDDA9\\uDEF3-\\uDEF6]|\\uD81A[\\uDE60-\\uDE69\\uDEF0-\\uDEF4\\uDF30-\\uDF36\\uDF50-\\uDF59]|\\uD81B[\\uDF51-\\uDF7E\\uDF8F-\\uDF92]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDCD0-\\uDCD6\\uDD44-\\uDD4A\\uDD50-\\uDD59]|\\uDB40[\\uDD00-\\uDDEF]/;\n      return isIdentifierStart(ch) || ch >= 48 && ch <= 57 || // 0..9\n      ch >= 0x80 && NonAsciiIdentifierPartOnly.test(fromCodePoint(ch));\n    }\n\n    function parseIdentityEscape() {\n      // IdentityEscape ::\n      //      [+U] SyntaxCharacter\n      //      [+U] /\n      //      [~U] SourceCharacterIdentityEscape[?N]\n      // SourceCharacterIdentityEscape[?N] ::\n      //      [~N] SourceCharacter but not c\n      //      [+N] SourceCharacter but not one of c or k\n      var tmp;\n      var l = lookahead();\n\n      if (hasUnicodeFlag && /[\\^\\$\\.\\*\\+\\?\\(\\)\\\\\\[\\]\\{\\}\\|\\/]/.test(l) || !hasUnicodeFlag && l !== \"c\") {\n        if (l === \"k\" && features.lookbehind) {\n          return null;\n        }\n\n        tmp = incr();\n        return createEscaped('identifier', tmp.charCodeAt(0), tmp, 1);\n      }\n\n      return null;\n    }\n\n    function parseCharacterClass() {\n      // CharacterClass ::\n      //      [ [lookahead ∉ {^}] ClassRanges ]\n      //      [ ^ ClassRanges ]\n      var res,\n          from = pos;\n\n      if (res = matchReg(/^\\[\\^/)) {\n        res = parseClassRanges();\n        skip(']');\n        return createCharacterClass(res, true, from, pos);\n      } else if (match('[')) {\n        res = parseClassRanges();\n        skip(']');\n        return createCharacterClass(res, false, from, pos);\n      }\n\n      return null;\n    }\n\n    function parseClassRanges() {\n      // ClassRanges ::\n      //      [empty]\n      //      NonemptyClassRanges\n      var res;\n\n      if (current(']')) {\n        // Empty array means nothing insinde of the ClassRange.\n        return [];\n      } else {\n        res = parseNonemptyClassRanges();\n\n        if (!res) {\n          bail('nonEmptyClassRanges');\n        }\n\n        return res;\n      }\n    }\n\n    function parseHelperClassRanges(atom) {\n      var from, to, res, atomTo, dash;\n\n      if (current('-') && !next(']')) {\n        // ClassAtom - ClassAtom ClassRanges\n        from = atom.range[0];\n        dash = createCharacter(match('-'));\n        atomTo = parseClassAtom();\n\n        if (!atomTo) {\n          bail('classAtom');\n        }\n\n        to = pos; // Parse the next class range if exists.\n\n        var classRanges = parseClassRanges();\n\n        if (!classRanges) {\n          bail('classRanges');\n        } // Check if both the from and atomTo have codePoints.\n\n\n        if (!('codePoint' in atom) || !('codePoint' in atomTo)) {\n          if (!hasUnicodeFlag) {\n            // If not, don't create a range but treat them as\n            // `atom` `-` `atom` instead.\n            //\n            // SEE: https://tc39.es/ecma262/#sec-regular-expression-patterns-semantics\n            //   NonemptyClassRanges::ClassAtom-ClassAtomClassRanges\n            //   CharacterRangeOrUnion\n            res = [atom, dash, atomTo];\n          } else {\n            // With unicode flag, both sides must have codePoints if\n            // one side has a codePoint.\n            //\n            // SEE: https://tc39.es/ecma262/#sec-patterns-static-semantics-early-errors\n            //   NonemptyClassRanges :: ClassAtom - ClassAtom ClassRanges\n            bail('invalid character class');\n          }\n        } else {\n          res = [createClassRange(atom, atomTo, from, to)];\n        }\n\n        if (classRanges.type === 'empty') {\n          return res;\n        }\n\n        return res.concat(classRanges);\n      }\n\n      res = parseNonemptyClassRangesNoDash();\n\n      if (!res) {\n        bail('nonEmptyClassRangesNoDash');\n      }\n\n      return [atom].concat(res);\n    }\n\n    function parseNonemptyClassRanges() {\n      // NonemptyClassRanges ::\n      //      ClassAtom\n      //      ClassAtom NonemptyClassRangesNoDash\n      //      ClassAtom - ClassAtom ClassRanges\n      var atom = parseClassAtom();\n\n      if (!atom) {\n        bail('classAtom');\n      }\n\n      if (current(']')) {\n        // ClassAtom\n        return [atom];\n      } // ClassAtom NonemptyClassRangesNoDash\n      // ClassAtom - ClassAtom ClassRanges\n\n\n      return parseHelperClassRanges(atom);\n    }\n\n    function parseNonemptyClassRangesNoDash() {\n      // NonemptyClassRangesNoDash ::\n      //      ClassAtom\n      //      ClassAtomNoDash NonemptyClassRangesNoDash\n      //      ClassAtomNoDash - ClassAtom ClassRanges\n      var res = parseClassAtom();\n\n      if (!res) {\n        bail('classAtom');\n      }\n\n      if (current(']')) {\n        //      ClassAtom\n        return res;\n      } // ClassAtomNoDash NonemptyClassRangesNoDash\n      // ClassAtomNoDash - ClassAtom ClassRanges\n\n\n      return parseHelperClassRanges(res);\n    }\n\n    function parseClassAtom() {\n      // ClassAtom ::\n      //      -\n      //      ClassAtomNoDash\n      if (match('-')) {\n        return createCharacter('-');\n      } else {\n        return parseClassAtomNoDash();\n      }\n    }\n\n    function parseClassAtomNoDash() {\n      // ClassAtomNoDash ::\n      //      SourceCharacter but not one of \\ or ] or -\n      //      \\ ClassEscape\n      var res;\n\n      if (res = matchReg(/^[^\\\\\\]-]/)) {\n        return createCharacter(res[0]);\n      } else if (match('\\\\')) {\n        res = parseClassEscape();\n\n        if (!res) {\n          bail('classEscape');\n        }\n\n        return parseUnicodeSurrogatePairEscape(res);\n      }\n    }\n\n    function bail(message, details, from, to) {\n      from = from == null ? pos : from;\n      to = to == null ? from : to;\n      var contextStart = Math.max(0, from - 10);\n      var contextEnd = Math.min(to + 10, str.length); // Output a bit of context and a line pointing to where our error is.\n      //\n      // We are assuming that there are no actual newlines in the content as this is a regular expression.\n\n      var context = '    ' + str.substring(contextStart, contextEnd);\n      var pointer = '    ' + new Array(from - contextStart + 1).join(' ') + '^';\n      throw SyntaxError(message + ' at position ' + from + (details ? ': ' + details : '') + '\\n' + context + '\\n' + pointer);\n    }\n\n    var backrefDenied = [];\n    var closedCaptureCounter = 0;\n    var firstIteration = true;\n    var hasUnicodeFlag = (flags || \"\").indexOf(\"u\") !== -1;\n    var pos = 0; // Convert the input to a string and treat the empty string special.\n\n    str = String(str);\n\n    if (str === '') {\n      str = '(?:)';\n    }\n\n    var result = parseDisjunction();\n\n    if (result.range[1] !== str.length) {\n      bail('Could not parse entire input - got stuck', '', result.range[1]);\n    } // The spec requires to interpret the `\\2` in `/\\2()()/` as backreference.\n    // As the parser collects the number of capture groups as the string is\n    // parsed it is impossible to make these decisions at the point when the\n    // `\\2` is handled. In case the local decision turns out to be wrong after\n    // the parsing has finished, the input string is parsed a second time with\n    // the total number of capture groups set.\n    //\n    // SEE: https://github.com/jviereck/regjsparser/issues/70\n\n\n    for (var i = 0; i < backrefDenied.length; i++) {\n      if (backrefDenied[i] <= closedCaptureCounter) {\n        // Parse the input a second time.\n        pos = 0;\n        firstIteration = false;\n        return parseDisjunction();\n      }\n    }\n\n    return result;\n  }\n\n  var regjsparser = {\n    parse: parse\n  };\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = regjsparser;\n  } else {\n    window.regjsparser = regjsparser;\n  }\n})();","map":{"version":3,"sources":["C:/Users/DEV. mmm/Documents/projects/Premium Pension/Agent mapping/Account-mapping/client/node_modules/regjsparser/parser.js"],"names":["fromCodePoint","String","stringFromCharCode","fromCharCode","floor","Math","MAX_SIZE","codeUnits","highSurrogate","lowSurrogate","index","length","arguments","result","codePoint","Number","isFinite","RangeError","push","apply","parse","str","flags","features","addRaw","node","raw","substring","range","updateRawStart","start","createAnchor","kind","rawLength","type","pos","createValue","from","to","createEscaped","value","fromOffset","createCharacter","matches","_char","first","charCodeAt","hasUnicodeFlag","second","lookahead","createDisjunction","alternatives","body","createDot","createCharacterClassEscape","createReference","matchIndex","parseInt","createNamedReference","name","createGroup","behavior","disjunction","createQuantifier","min","max","greedy","createAlternative","terms","createCharacterClass","classRanges","negative","createClassRange","bail","flattenBody","isEmpty","obj","incr","amount","res","skip","match","indexOf","current","next","matchReg","regExp","subStr","parseDisjunction","parseAlternative","term","parseTerm","anchor","parseAnchor","atom","parseAtomAndExtendedAtom","pos_backup","quantifier","parseQuantifier","parseGroup","matchA","typeA","matchB","typeB","finishGroup","group","firstIteration","closedCaptureCounter","undefined","parseAtomEscape","parseCharacterClass","lookbehind","namedGroups","parseIdentifier","parseUnicodeSurrogatePairEscape","firstEscape","prevPos","secondEscape","parseClassEscape","insideCharacterClass","parseDecimalEscape","parseNamedReference","parseCharacterEscape","refIdx","backrefDenied","test","parseRegExpUnicodeEscapeSequence","unicodePropertyEscape","parseIdentityEscape","parseIdentifierAtom","check","ch","esc","code","isIdentifierStart","isIdentifierPart","NonAsciiIdentifierStart","NonAsciiIdentifierPartOnly","tmp","l","parseClassRanges","parseNonemptyClassRanges","parseHelperClassRanges","atomTo","dash","parseClassAtom","concat","parseNonemptyClassRangesNoDash","parseClassAtomNoDash","message","details","contextStart","contextEnd","context","pointer","Array","join","SyntaxError","i","regjsparser","module","exports","window"],"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","sourcesContent":["// regjsparser\r\n//\r\n// ==================================================================\r\n//\r\n// See ECMA-262 Standard: 15.10.1\r\n//\r\n// NOTE: The ECMA-262 standard uses the term \"Assertion\" for /^/. Here the\r\n//   term \"Anchor\" is used.\r\n//\r\n// Pattern ::\r\n//      Disjunction\r\n//\r\n// Disjunction ::\r\n//      Alternative\r\n//      Alternative | Disjunction\r\n//\r\n// Alternative ::\r\n//      [empty]\r\n//      Alternative Term\r\n//\r\n// Term ::\r\n//      Anchor\r\n//      Atom\r\n//      Atom Quantifier\r\n//\r\n// Anchor ::\r\n//      ^\r\n//      $\r\n//      \\ b\r\n//      \\ B\r\n//      ( ? = Disjunction )\r\n//      ( ? ! Disjunction )\r\n//      ( ? < = Disjunction )\r\n//      ( ? < ! Disjunction )\r\n//\r\n// Quantifier ::\r\n//      QuantifierPrefix\r\n//      QuantifierPrefix ?\r\n//\r\n// QuantifierPrefix ::\r\n//      *\r\n//      +\r\n//      ?\r\n//      { DecimalDigits }\r\n//      { DecimalDigits , }\r\n//      { DecimalDigits , DecimalDigits }\r\n//\r\n// Atom ::\r\n//      PatternCharacter\r\n//      .\r\n//      \\ AtomEscape\r\n//      CharacterClass\r\n//      ( GroupSpecifier Disjunction )\r\n//      ( ? : Disjunction )\r\n//\r\n// PatternCharacter ::\r\n//      SourceCharacter but not any of: ^ $ \\ . * + ? ( ) [ ] { } |\r\n//\r\n// AtomEscape ::\r\n//      DecimalEscape\r\n//      CharacterEscape\r\n//      CharacterClassEscape\r\n//      k GroupName\r\n//\r\n// CharacterEscape[U] ::\r\n//      ControlEscape\r\n//      c ControlLetter\r\n//      HexEscapeSequence\r\n//      RegExpUnicodeEscapeSequence[?U] (ES6)\r\n//      IdentityEscape[?U]\r\n//\r\n// ControlEscape ::\r\n//      one of f n r t v\r\n// ControlLetter ::\r\n//      one of\r\n//          a b c d e f g h i j k l m n o p q r s t u v w x y z\r\n//          A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\r\n//\r\n// IdentityEscape ::\r\n//      SourceCharacter but not c\r\n//\r\n// DecimalEscape ::\r\n//      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]\r\n//\r\n// CharacterClassEscape ::\r\n//      one of d D s S w W\r\n//\r\n// CharacterClass ::\r\n//      [ [lookahead ∉ {^}] ClassRanges ]\r\n//      [ ^ ClassRanges ]\r\n//\r\n// ClassRanges ::\r\n//      [empty]\r\n//      NonemptyClassRanges\r\n//\r\n// NonemptyClassRanges ::\r\n//      ClassAtom\r\n//      ClassAtom NonemptyClassRangesNoDash\r\n//      ClassAtom - ClassAtom ClassRanges\r\n//\r\n// NonemptyClassRangesNoDash ::\r\n//      ClassAtom\r\n//      ClassAtomNoDash NonemptyClassRangesNoDash\r\n//      ClassAtomNoDash - ClassAtom ClassRanges\r\n//\r\n// ClassAtom ::\r\n//      -\r\n//      ClassAtomNoDash\r\n//\r\n// ClassAtomNoDash ::\r\n//      SourceCharacter but not one of \\ or ] or -\r\n//      \\ ClassEscape\r\n//\r\n// ClassEscape ::\r\n//      DecimalEscape\r\n//      b\r\n//      CharacterEscape\r\n//      CharacterClassEscape\r\n//\r\n// GroupSpecifier ::\r\n//      [empty]\r\n//      ? GroupName\r\n//\r\n// GroupName ::\r\n//      < RegExpIdentifierName >\r\n//\r\n// RegExpIdentifierName ::\r\n//      RegExpIdentifierStart\r\n//      RegExpIdentifierName RegExpIdentifierContinue\r\n//\r\n// RegExpIdentifierStart ::\r\n//      UnicodeIDStart\r\n//      $\r\n//      _\r\n//      \\ RegExpUnicodeEscapeSequence\r\n//\r\n// RegExpIdentifierContinue ::\r\n//      UnicodeIDContinue\r\n//      $\r\n//      _\r\n//      \\ RegExpUnicodeEscapeSequence\r\n//      <ZWNJ>\r\n//      <ZWJ>\r\n\r\n(function() {\r\n\r\n  var fromCodePoint = String.fromCodePoint || (function() {\r\n    // Implementation taken from\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\r\n\r\n    var stringFromCharCode = String.fromCharCode;\r\n    var floor = Math.floor;\r\n\r\n    return function fromCodePoint() {\r\n      var MAX_SIZE = 0x4000;\r\n      var codeUnits = [];\r\n      var highSurrogate;\r\n      var lowSurrogate;\r\n      var index = -1;\r\n      var length = arguments.length;\r\n      if (!length) {\r\n        return '';\r\n      }\r\n      var result = '';\r\n      while (++index < length) {\r\n        var codePoint = Number(arguments[index]);\r\n        if (\r\n          !isFinite(codePoint) ||       // `NaN`, `+Infinity`, or `-Infinity`\r\n          codePoint < 0 ||              // not a valid Unicode code point\r\n          codePoint > 0x10FFFF ||       // not a valid Unicode code point\r\n          floor(codePoint) != codePoint // not an integer\r\n        ) {\r\n          throw RangeError('Invalid code point: ' + codePoint);\r\n        }\r\n        if (codePoint <= 0xFFFF) { // BMP code point\r\n          codeUnits.push(codePoint);\r\n        } else { // Astral code point; split in surrogate halves\r\n          // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\r\n          codePoint -= 0x10000;\r\n          highSurrogate = (codePoint >> 10) + 0xD800;\r\n          lowSurrogate = (codePoint % 0x400) + 0xDC00;\r\n          codeUnits.push(highSurrogate, lowSurrogate);\r\n        }\r\n        if (index + 1 == length || codeUnits.length > MAX_SIZE) {\r\n          result += stringFromCharCode.apply(null, codeUnits);\r\n          codeUnits.length = 0;\r\n        }\r\n      }\r\n      return result;\r\n    };\r\n  }());\r\n\r\n  function parse(str, flags, features) {\r\n    if (!features) {\r\n      features = {};\r\n    }\r\n    function addRaw(node) {\r\n      node.raw = str.substring(node.range[0], node.range[1]);\r\n      return node;\r\n    }\r\n\r\n    function updateRawStart(node, start) {\r\n      node.range[0] = start;\r\n      return addRaw(node);\r\n    }\r\n\r\n    function createAnchor(kind, rawLength) {\r\n      return addRaw({\r\n        type: 'anchor',\r\n        kind: kind,\r\n        range: [\r\n          pos - rawLength,\r\n          pos\r\n        ]\r\n      });\r\n    }\r\n\r\n    function createValue(kind, codePoint, from, to) {\r\n      return addRaw({\r\n        type: 'value',\r\n        kind: kind,\r\n        codePoint: codePoint,\r\n        range: [from, to]\r\n      });\r\n    }\r\n\r\n    function createEscaped(kind, codePoint, value, fromOffset) {\r\n      fromOffset = fromOffset || 0;\r\n      return createValue(kind, codePoint, pos - (value.length + fromOffset), pos);\r\n    }\r\n\r\n    function createCharacter(matches) {\r\n      var _char = matches[0];\r\n      var first = _char.charCodeAt(0);\r\n      if (hasUnicodeFlag) {\r\n        var second;\r\n        if (_char.length === 1 && first >= 0xD800 && first <= 0xDBFF) {\r\n          second = lookahead().charCodeAt(0);\r\n          if (second >= 0xDC00 && second <= 0xDFFF) {\r\n            // Unicode surrogate pair\r\n            pos++;\r\n            return createValue(\r\n                'symbol',\r\n                (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000,\r\n                pos - 2, pos);\r\n          }\r\n        }\r\n      }\r\n      return createValue('symbol', first, pos - 1, pos);\r\n    }\r\n\r\n    function createDisjunction(alternatives, from, to) {\r\n      return addRaw({\r\n        type: 'disjunction',\r\n        body: alternatives,\r\n        range: [\r\n          from,\r\n          to\r\n        ]\r\n      });\r\n    }\r\n\r\n    function createDot() {\r\n      return addRaw({\r\n        type: 'dot',\r\n        range: [\r\n          pos - 1,\r\n          pos\r\n        ]\r\n      });\r\n    }\r\n\r\n    function createCharacterClassEscape(value) {\r\n      return addRaw({\r\n        type: 'characterClassEscape',\r\n        value: value,\r\n        range: [\r\n          pos - 2,\r\n          pos\r\n        ]\r\n      });\r\n    }\r\n\r\n    function createReference(matchIndex) {\r\n      return addRaw({\r\n        type: 'reference',\r\n        matchIndex: parseInt(matchIndex, 10),\r\n        range: [\r\n          pos - 1 - matchIndex.length,\r\n          pos\r\n        ]\r\n      });\r\n    }\r\n\r\n    function createNamedReference(name) {\r\n      return addRaw({\r\n        type: 'reference',\r\n        name: name,\r\n        range: [\r\n          name.range[0] - 3,\r\n          pos\r\n        ]\r\n      });\r\n    }\r\n\r\n    function createGroup(behavior, disjunction, from, to) {\r\n      return addRaw({\r\n        type: 'group',\r\n        behavior: behavior,\r\n        body: disjunction,\r\n        range: [\r\n          from,\r\n          to\r\n        ]\r\n      });\r\n    }\r\n\r\n    function createQuantifier(min, max, from, to) {\r\n      if (to == null) {\r\n        from = pos - 1;\r\n        to = pos;\r\n      }\r\n\r\n      return addRaw({\r\n        type: 'quantifier',\r\n        min: min,\r\n        max: max,\r\n        greedy: true,\r\n        body: null, // set later on\r\n        range: [\r\n          from,\r\n          to\r\n        ]\r\n      });\r\n    }\r\n\r\n    function createAlternative(terms, from, to) {\r\n      return addRaw({\r\n        type: 'alternative',\r\n        body: terms,\r\n        range: [\r\n          from,\r\n          to\r\n        ]\r\n      });\r\n    }\r\n\r\n    function createCharacterClass(classRanges, negative, from, to) {\r\n      return addRaw({\r\n        type: 'characterClass',\r\n        body: classRanges,\r\n        negative: negative,\r\n        range: [\r\n          from,\r\n          to\r\n        ]\r\n      });\r\n    }\r\n\r\n    function createClassRange(min, max, from, to) {\r\n      // See 15.10.2.15:\r\n      if (min.codePoint > max.codePoint) {\r\n        bail('invalid range in character class', min.raw + '-' + max.raw, from, to);\r\n      }\r\n\r\n      return addRaw({\r\n        type: 'characterClassRange',\r\n        min: min,\r\n        max: max,\r\n        range: [\r\n          from,\r\n          to\r\n        ]\r\n      });\r\n    }\r\n\r\n    function flattenBody(body) {\r\n      if (body.type === 'alternative') {\r\n        return body.body;\r\n      } else {\r\n        return [body];\r\n      }\r\n    }\r\n\r\n    function isEmpty(obj) {\r\n      return obj.type === 'empty';\r\n    }\r\n\r\n    function incr(amount) {\r\n      amount = (amount || 1);\r\n      var res = str.substring(pos, pos + amount);\r\n      pos += (amount || 1);\r\n      return res;\r\n    }\r\n\r\n    function skip(value) {\r\n      if (!match(value)) {\r\n        bail('character', value);\r\n      }\r\n    }\r\n\r\n    function match(value) {\r\n      if (str.indexOf(value, pos) === pos) {\r\n        return incr(value.length);\r\n      }\r\n    }\r\n\r\n    function lookahead() {\r\n      return str[pos];\r\n    }\r\n\r\n    function current(value) {\r\n      return str.indexOf(value, pos) === pos;\r\n    }\r\n\r\n    function next(value) {\r\n      return str[pos + 1] === value;\r\n    }\r\n\r\n    function matchReg(regExp) {\r\n      var subStr = str.substring(pos);\r\n      var res = subStr.match(regExp);\r\n      if (res) {\r\n        res.range = [];\r\n        res.range[0] = pos;\r\n        incr(res[0].length);\r\n        res.range[1] = pos;\r\n      }\r\n      return res;\r\n    }\r\n\r\n    function parseDisjunction() {\r\n      // Disjunction ::\r\n      //      Alternative\r\n      //      Alternative | Disjunction\r\n      var res = [], from = pos;\r\n      res.push(parseAlternative());\r\n\r\n      while (match('|')) {\r\n        res.push(parseAlternative());\r\n      }\r\n\r\n      if (res.length === 1) {\r\n        return res[0];\r\n      }\r\n\r\n      return createDisjunction(res, from, pos);\r\n    }\r\n\r\n    function parseAlternative() {\r\n      var res = [], from = pos;\r\n      var term;\r\n\r\n      // Alternative ::\r\n      //      [empty]\r\n      //      Alternative Term\r\n      while (term = parseTerm()) {\r\n        res.push(term);\r\n      }\r\n\r\n      if (res.length === 1) {\r\n        return res[0];\r\n      }\r\n\r\n      return createAlternative(res, from, pos);\r\n    }\r\n\r\n    function parseTerm() {\r\n      // Term ::\r\n      //      Anchor\r\n      //      Atom\r\n      //      Atom Quantifier\r\n\r\n      if (pos >= str.length || current('|') || current(')')) {\r\n        return null; /* Means: The term is empty */\r\n      }\r\n\r\n      var anchor = parseAnchor();\r\n\r\n      if (anchor) {\r\n        return anchor;\r\n      }\r\n\r\n      var atom = parseAtomAndExtendedAtom();\r\n      if (!atom) {\r\n        // Check if a quantifier is following. A quantifier without an atom\r\n        // is an error.\r\n        pos_backup = pos\r\n        var quantifier = parseQuantifier() || false;\r\n        if (quantifier) {\r\n          pos = pos_backup\r\n          bail('Expected atom');\r\n        }\r\n\r\n        // If no unicode flag, then try to parse ExtendedAtom -> ExtendedPatternCharacter.\r\n        //      ExtendedPatternCharacter\r\n        if (!hasUnicodeFlag && (res = matchReg(/^{/))) {\r\n          atom = createCharacter(res);\r\n        } else {\r\n          bail('Expected atom');\r\n        }\r\n      }\r\n      var quantifier = parseQuantifier() || false;\r\n      if (quantifier) {\r\n        quantifier.body = flattenBody(atom);\r\n        // The quantifier contains the atom. Therefore, the beginning of the\r\n        // quantifier range is given by the beginning of the atom.\r\n        updateRawStart(quantifier, atom.range[0]);\r\n        return quantifier;\r\n      }\r\n      return atom;\r\n    }\r\n\r\n    function parseGroup(matchA, typeA, matchB, typeB) {\r\n      var type = null, from = pos;\r\n\r\n      if (match(matchA)) {\r\n        type = typeA;\r\n      } else if (match(matchB)) {\r\n        type = typeB;\r\n      } else {\r\n        return false;\r\n      }\r\n\r\n      return finishGroup(type, from);\r\n    }\r\n\r\n    function finishGroup(type, from) {\r\n      var body = parseDisjunction();\r\n      if (!body) {\r\n        bail('Expected disjunction');\r\n      }\r\n      skip(')');\r\n      var group = createGroup(type, flattenBody(body), from, pos);\r\n\r\n      if (type == 'normal') {\r\n        // Keep track of the number of closed groups. This is required for\r\n        // parseDecimalEscape(). In case the string is parsed a second time the\r\n        // value already holds the total count and no incrementation is required.\r\n        if (firstIteration) {\r\n          closedCaptureCounter++;\r\n        }\r\n      }\r\n      return group;\r\n    }\r\n\r\n    function parseAnchor() {\r\n      // Anchor ::\r\n      //      ^\r\n      //      $\r\n      //      \\ b\r\n      //      \\ B\r\n      //      ( ? = Disjunction )\r\n      //      ( ? ! Disjunction )\r\n      var res, from = pos;\r\n\r\n      if (match('^')) {\r\n        return createAnchor('start', 1 /* rawLength */);\r\n      } else if (match('$')) {\r\n        return createAnchor('end', 1 /* rawLength */);\r\n      } else if (match('\\\\b')) {\r\n        return createAnchor('boundary', 2 /* rawLength */);\r\n      } else if (match('\\\\B')) {\r\n        return createAnchor('not-boundary', 2 /* rawLength */);\r\n      } else {\r\n        return parseGroup('(?=', 'lookahead', '(?!', 'negativeLookahead');\r\n      }\r\n    }\r\n\r\n    function parseQuantifier() {\r\n      // Quantifier ::\r\n      //      QuantifierPrefix\r\n      //      QuantifierPrefix ?\r\n      //\r\n      // QuantifierPrefix ::\r\n      //      *\r\n      //      +\r\n      //      ?\r\n      //      { DecimalDigits }\r\n      //      { DecimalDigits , }\r\n      //      { DecimalDigits , DecimalDigits }\r\n\r\n      var res, from = pos;\r\n      var quantifier;\r\n      var min, max;\r\n\r\n      if (match('*')) {\r\n        quantifier = createQuantifier(0);\r\n      }\r\n      else if (match('+')) {\r\n        quantifier = createQuantifier(1);\r\n      }\r\n      else if (match('?')) {\r\n        quantifier = createQuantifier(0, 1);\r\n      }\r\n      else if (res = matchReg(/^\\{([0-9]+)\\}/)) {\r\n        min = parseInt(res[1], 10);\r\n        quantifier = createQuantifier(min, min, res.range[0], res.range[1]);\r\n      }\r\n      else if (res = matchReg(/^\\{([0-9]+),\\}/)) {\r\n        min = parseInt(res[1], 10);\r\n        quantifier = createQuantifier(min, undefined, res.range[0], res.range[1]);\r\n      }\r\n      else if (res = matchReg(/^\\{([0-9]+),([0-9]+)\\}/)) {\r\n        min = parseInt(res[1], 10);\r\n        max = parseInt(res[2], 10);\r\n        if (min > max) {\r\n          bail('numbers out of order in {} quantifier', '', from, pos);\r\n        }\r\n        quantifier = createQuantifier(min, max, res.range[0], res.range[1]);\r\n      }\r\n\r\n      if (quantifier) {\r\n        if (match('?')) {\r\n          quantifier.greedy = false;\r\n          quantifier.range[1] += 1;\r\n        }\r\n      }\r\n\r\n      return quantifier;\r\n    }\r\n\r\n    function parseAtomAndExtendedAtom() {\r\n      // Parsing Atom and ExtendedAtom together due to redundancy.\r\n      // ExtendedAtom is defined in Apendix B of the ECMA-262 standard.\r\n      //\r\n      // SEE: https://www.ecma-international.org/ecma-262/10.0/index.html#prod-annexB-ExtendedPatternCharacter\r\n      //\r\n      // Atom ::\r\n      //      PatternCharacter\r\n      //      .\r\n      //      \\ AtomEscape\r\n      //      CharacterClass\r\n      //      ( GroupSpecifier Disjunction )\r\n      //      ( ? : Disjunction )\r\n      // ExtendedAtom ::\r\n      //      ExtendedPatternCharacter\r\n      // ExtendedPatternCharacter ::\r\n      //      SourceCharacter but not one of ^$\\.*+?()[|\r\n\r\n      var res;\r\n\r\n      // jviereck: allow ']', '}' here as well to be compatible with browser's\r\n      //   implementations: ']'.match(/]/);\r\n      if (res = matchReg(/^[^^$\\\\.*+?()[\\]{}|]/)) {\r\n        //      PatternCharacter\r\n        return createCharacter(res);\r\n      }\r\n      else if (!hasUnicodeFlag && (res = matchReg(/^(?:]|})/))) {\r\n        //      ExtendedPatternCharacter, first part. See parseTerm.\r\n        return createCharacter(res);\r\n      }\r\n      else if (match('.')) {\r\n        //      .\r\n        return createDot();\r\n      }\r\n      else if (match('\\\\')) {\r\n        //      \\ AtomEscape\r\n        res = parseAtomEscape();\r\n        if (!res) {\r\n          if (!hasUnicodeFlag && lookahead() == 'c') {\r\n            // B.1.4 ExtendedAtom\r\n            // \\[lookahead = c]\r\n            return createValue('symbol', 92, pos - 1, pos);\r\n          }\r\n          bail('atomEscape');\r\n        }\r\n        return res;\r\n      }\r\n      else if (res = parseCharacterClass()) {\r\n        return res;\r\n      }\r\n      else if (features.lookbehind && (res = parseGroup('(?<=', 'lookbehind', '(?<!', 'negativeLookbehind'))) {\r\n        return res;\r\n      }\r\n      else if (features.namedGroups && match(\"(?<\")) {\r\n        var name = parseIdentifier();\r\n        skip(\">\");\r\n        var group = finishGroup(\"normal\", name.range[0] - 3);\r\n        group.name = name;\r\n        return group;\r\n      }\r\n      else {\r\n        //      ( Disjunction )\r\n        //      ( ? : Disjunction )\r\n        return parseGroup('(?:', 'ignore', '(', 'normal');\r\n      }\r\n    }\r\n\r\n    function parseUnicodeSurrogatePairEscape(firstEscape) {\r\n      if (hasUnicodeFlag) {\r\n        var first, second;\r\n        if (firstEscape.kind == 'unicodeEscape' &&\r\n          (first = firstEscape.codePoint) >= 0xD800 && first <= 0xDBFF &&\r\n          current('\\\\') && next('u') ) {\r\n          var prevPos = pos;\r\n          pos++;\r\n          var secondEscape = parseClassEscape();\r\n          if (secondEscape.kind == 'unicodeEscape' &&\r\n            (second = secondEscape.codePoint) >= 0xDC00 && second <= 0xDFFF) {\r\n            // Unicode surrogate pair\r\n            firstEscape.range[1] = secondEscape.range[1];\r\n            firstEscape.codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\r\n            firstEscape.type = 'value';\r\n            firstEscape.kind = 'unicodeCodePointEscape';\r\n            addRaw(firstEscape);\r\n          }\r\n          else {\r\n            pos = prevPos;\r\n          }\r\n        }\r\n      }\r\n      return firstEscape;\r\n    }\r\n\r\n    function parseClassEscape() {\r\n      return parseAtomEscape(true);\r\n    }\r\n\r\n    function parseAtomEscape(insideCharacterClass) {\r\n      // AtomEscape ::\r\n      //      DecimalEscape\r\n      //      CharacterEscape\r\n      //      CharacterClassEscape\r\n      //      k GroupName\r\n\r\n      var res, from = pos;\r\n\r\n      res = parseDecimalEscape() || parseNamedReference();\r\n      if (res) {\r\n        return res;\r\n      }\r\n\r\n      // For ClassEscape\r\n      if (insideCharacterClass) {\r\n        //     b\r\n        if (match('b')) {\r\n          // 15.10.2.19\r\n          // The production ClassEscape :: b evaluates by returning the\r\n          // CharSet containing the one character <BS> (Unicode value 0008).\r\n          return createEscaped('singleEscape', 0x0008, '\\\\b');\r\n        } else if (match('B')) {\r\n          bail('\\\\B not possible inside of CharacterClass', '', from);\r\n        } else if (!hasUnicodeFlag && (res = matchReg(/^c([0-9])/))) {\r\n          // B.1.4\r\n          // c ClassControlLetter, ClassControlLetter = DecimalDigit\r\n          return createEscaped('controlLetter', res[1] + 16, res[1], 2);\r\n        } else if (!hasUnicodeFlag && (res = matchReg(/^c_/))) {\r\n          // B.1.4\r\n          // c ClassControlLetter, ClassControlLetter = _\r\n          return createEscaped('controlLetter', 31, '_', 2);\r\n        }\r\n        //     [+U] -\r\n        if (hasUnicodeFlag && match('-')) {\r\n          return createEscaped('singleEscape', 0x002d, '\\\\-');\r\n        }\r\n      }\r\n\r\n      res = parseCharacterEscape();\r\n\r\n      return res;\r\n    }\r\n\r\n\r\n    function parseDecimalEscape() {\r\n      // DecimalEscape ::\r\n      //      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]\r\n      //      CharacterClassEscape :: one of d D s S w W\r\n\r\n      var res, match;\r\n\r\n      if (res = matchReg(/^(?!0)\\d+/)) {\r\n        match = res[0];\r\n        var refIdx = parseInt(res[0], 10);\r\n        if (refIdx <= closedCaptureCounter) {\r\n          // If the number is smaller than the normal-groups found so\r\n          // far, then it is a reference...\r\n          return createReference(res[0]);\r\n        } else {\r\n          // ... otherwise it needs to be interpreted as a octal (if the\r\n          // number is in an octal format). If it is NOT octal format,\r\n          // then the slash is ignored and the number is matched later\r\n          // as normal characters.\r\n\r\n          // Recall the negative decision to decide if the input must be parsed\r\n          // a second time with the total normal-groups.\r\n          backrefDenied.push(refIdx);\r\n\r\n          // Reset the position again, as maybe only parts of the previous\r\n          // matched numbers are actual octal numbers. E.g. in '019' only\r\n          // the '01' should be matched.\r\n          incr(-res[0].length);\r\n          if (res = matchReg(/^[0-7]{1,3}/)) {\r\n            return createEscaped('octal', parseInt(res[0], 8), res[0], 1);\r\n          } else {\r\n            // If we end up here, we have a case like /\\91/. Then the\r\n            // first slash is to be ignored and the 9 & 1 to be treated\r\n            // like ordinary characters. Create a character for the\r\n            // first number only here - other number-characters\r\n            // (if available) will be matched later.\r\n            res = createCharacter(matchReg(/^[89]/));\r\n            return updateRawStart(res, res.range[0] - 1);\r\n          }\r\n        }\r\n      }\r\n      // Only allow octal numbers in the following. All matched numbers start\r\n      // with a zero (if the do not, the previous if-branch is executed).\r\n      // If the number is not octal format and starts with zero (e.g. `091`)\r\n      // then only the zeros `0` is treated here and the `91` are ordinary\r\n      // characters.\r\n      // Example:\r\n      //   /\\091/.exec('\\091')[0].length === 3\r\n      else if (res = matchReg(/^[0-7]{1,3}/)) {\r\n        match = res[0];\r\n        if (/^0{1,3}$/.test(match)) {\r\n          // If they are all zeros, then only take the first one.\r\n          return createEscaped('null', 0x0000, '0', match.length);\r\n        } else {\r\n          return createEscaped('octal', parseInt(match, 8), match, 1);\r\n        }\r\n      } else if (res = matchReg(/^[dDsSwW]/)) {\r\n        return createCharacterClassEscape(res[0]);\r\n      }\r\n      return false;\r\n    }\r\n\r\n    function parseNamedReference() {\r\n      if (features.namedGroups && matchReg(/^k<(?=.*?>)/)) {\r\n        var name = parseIdentifier();\r\n        skip('>');\r\n        return createNamedReference(name);\r\n      }\r\n    }\r\n\r\n    function parseRegExpUnicodeEscapeSequence() {\r\n      var res;\r\n      if (res = matchReg(/^u([0-9a-fA-F]{4})/)) {\r\n        // UnicodeEscapeSequence\r\n        return parseUnicodeSurrogatePairEscape(\r\n          createEscaped('unicodeEscape', parseInt(res[1], 16), res[1], 2)\r\n        );\r\n      } else if (hasUnicodeFlag && (res = matchReg(/^u\\{([0-9a-fA-F]+)\\}/))) {\r\n        // RegExpUnicodeEscapeSequence (ES6 Unicode code point escape)\r\n        return createEscaped('unicodeCodePointEscape', parseInt(res[1], 16), res[1], 4);\r\n      }\r\n    }\r\n\r\n    function parseCharacterEscape() {\r\n      // CharacterEscape ::\r\n      //      ControlEscape\r\n      //      c ControlLetter\r\n      //      HexEscapeSequence\r\n      //      UnicodeEscapeSequence\r\n      //      IdentityEscape\r\n\r\n      var res;\r\n      var from = pos;\r\n      if (res = matchReg(/^[fnrtv]/)) {\r\n        // ControlEscape\r\n        var codePoint = 0;\r\n        switch (res[0]) {\r\n          case 't': codePoint = 0x009; break;\r\n          case 'n': codePoint = 0x00A; break;\r\n          case 'v': codePoint = 0x00B; break;\r\n          case 'f': codePoint = 0x00C; break;\r\n          case 'r': codePoint = 0x00D; break;\r\n        }\r\n        return createEscaped('singleEscape', codePoint, '\\\\' + res[0]);\r\n      } else if (res = matchReg(/^c([a-zA-Z])/)) {\r\n        // c ControlLetter\r\n        return createEscaped('controlLetter', res[1].charCodeAt(0) % 32, res[1], 2);\r\n      } else if (res = matchReg(/^x([0-9a-fA-F]{2})/)) {\r\n        // HexEscapeSequence\r\n        return createEscaped('hexadecimalEscape', parseInt(res[1], 16), res[1], 2);\r\n      } else if (res = parseRegExpUnicodeEscapeSequence()) {\r\n        if (!res || res.codePoint > 0x10FFFF) {\r\n          bail('Invalid escape sequence', null, from, pos);\r\n        }\r\n        return res;\r\n      } else if (features.unicodePropertyEscape && hasUnicodeFlag && (res = matchReg(/^([pP])\\{([^\\}]+)\\}/))) {\r\n        // https://github.com/jviereck/regjsparser/issues/77\r\n        return addRaw({\r\n          type: 'unicodePropertyEscape',\r\n          negative: res[1] === 'P',\r\n          value: res[2],\r\n          range: [res.range[0] - 1, res.range[1]],\r\n          raw: res[0]\r\n        });\r\n      } else {\r\n        // IdentityEscape\r\n        return parseIdentityEscape();\r\n      }\r\n    }\r\n\r\n    function parseIdentifierAtom(check) {\r\n      var ch = lookahead();\r\n      var from = pos;\r\n      if (ch === '\\\\') {\r\n        incr();\r\n        var esc = parseRegExpUnicodeEscapeSequence();\r\n        if (!esc || !check(esc.codePoint)) {\r\n          bail('Invalid escape sequence', null, from, pos);\r\n        }\r\n        return fromCodePoint(esc.codePoint);\r\n      }\r\n      var code = ch.charCodeAt(0);\r\n      if (code >= 0xD800 && code <= 0xDBFF) {\r\n        ch += str[pos + 1];\r\n        var second = ch.charCodeAt(1);\r\n        if (second >= 0xDC00 && second <= 0xDFFF) {\r\n          // Unicode surrogate pair\r\n          code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\r\n        }\r\n      }\r\n      if (!check(code)) return;\r\n      incr();\r\n      if (code > 0xFFFF) incr();\r\n      return ch;\r\n    }\r\n\r\n    function parseIdentifier() {\r\n      // RegExpIdentifierName ::\r\n      //      RegExpIdentifierStart\r\n      //      RegExpIdentifierName RegExpIdentifierContinue\r\n      //\r\n      // RegExpIdentifierStart ::\r\n      //      UnicodeIDStart\r\n      //      $\r\n      //      _\r\n      //      \\ RegExpUnicodeEscapeSequence\r\n      //\r\n      // RegExpIdentifierContinue ::\r\n      //      UnicodeIDContinue\r\n      //      $\r\n      //      _\r\n      //      \\ RegExpUnicodeEscapeSequence\r\n      //      <ZWNJ>\r\n      //      <ZWJ>\r\n\r\n      var start = pos;\r\n      var res = parseIdentifierAtom(isIdentifierStart);\r\n      if (!res) {\r\n        bail('Invalid identifier');\r\n      }\r\n\r\n      var ch;\r\n      while (ch = parseIdentifierAtom(isIdentifierPart)) {\r\n        res += ch;\r\n      }\r\n\r\n      return addRaw({\r\n        type: 'identifier',\r\n        value: res,\r\n        range: [start, pos]\r\n      });\r\n    }\r\n\r\n    function isIdentifierStart(ch) {\r\n      // Generated by `tools/generate-identifier-regex.js`.\r\n      var NonAsciiIdentifierStart = /[\\$A-Z_a-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7B9\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF1A]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFF1]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/;\r\n\r\n      return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)\r\n        (ch >= 65 && ch <= 90) ||         // A..Z\r\n        (ch >= 97 && ch <= 122) ||        // a..z\r\n        ((ch >= 0x80) && NonAsciiIdentifierStart.test(fromCodePoint(ch)));\r\n    }\r\n\r\n    // Taken from the Esprima parser.\r\n    function isIdentifierPart(ch) {\r\n      // Generated by `tools/generate-identifier-regex.js`.\r\n      var NonAsciiIdentifierPartOnly = /[0-9_\\xB7\\u0300-\\u036F\\u0387\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u0669\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07C0-\\u07C9\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096F\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09E6-\\u09EF\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A66-\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AE6-\\u0AEF\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B66-\\u0B6F\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C04\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CE6-\\u0CEF\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D66-\\u0D6F\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0E50-\\u0E59\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1040-\\u1049\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F-\\u109D\\u135D-\\u135F\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u194F\\u19D0-\\u19DA\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AB0-\\u1ABD\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BB0-\\u1BB9\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1C40-\\u1C49\\u1C50-\\u1C59\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u200C\\u200D\\u203F\\u2040\\u2054\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA620-\\uA629\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F1\\uA8FF-\\uA909\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9D0-\\uA9D9\\uA9E5\\uA9F0-\\uA9F9\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA50-\\uAA59\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF10-\\uFF19\\uFF3F]|\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD801[\\uDCA0-\\uDCA9]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD803[\\uDD24-\\uDD27\\uDD30-\\uDD39\\uDF46-\\uDF50]|\\uD804[\\uDC00-\\uDC02\\uDC38-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDC82\\uDCB0-\\uDCBA\\uDCF0-\\uDCF9\\uDD00-\\uDD02\\uDD27-\\uDD34\\uDD36-\\uDD3F\\uDD45\\uDD46\\uDD73\\uDD80-\\uDD82\\uDDB3-\\uDDC0\\uDDC9-\\uDDCC\\uDDD0-\\uDDD9\\uDE2C-\\uDE37\\uDE3E\\uDEDF-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF3B\\uDF3C\\uDF3E-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF62\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC35-\\uDC46\\uDC50-\\uDC59\\uDC5E\\uDCB0-\\uDCC3\\uDCD0-\\uDCD9\\uDDAF-\\uDDB5\\uDDB8-\\uDDC0\\uDDDC\\uDDDD\\uDE30-\\uDE40\\uDE50-\\uDE59\\uDEAB-\\uDEB7\\uDEC0-\\uDEC9\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDC2C-\\uDC3A\\uDCE0-\\uDCE9\\uDE01-\\uDE0A\\uDE33-\\uDE39\\uDE3B-\\uDE3E\\uDE47\\uDE51-\\uDE5B\\uDE8A-\\uDE99]|\\uD807[\\uDC2F-\\uDC36\\uDC38-\\uDC3F\\uDC50-\\uDC59\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD31-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD45\\uDD47\\uDD50-\\uDD59\\uDD8A-\\uDD8E\\uDD90\\uDD91\\uDD93-\\uDD97\\uDDA0-\\uDDA9\\uDEF3-\\uDEF6]|\\uD81A[\\uDE60-\\uDE69\\uDEF0-\\uDEF4\\uDF30-\\uDF36\\uDF50-\\uDF59]|\\uD81B[\\uDF51-\\uDF7E\\uDF8F-\\uDF92]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDCD0-\\uDCD6\\uDD44-\\uDD4A\\uDD50-\\uDD59]|\\uDB40[\\uDD00-\\uDDEF]/;\r\n\r\n      return isIdentifierStart(ch) ||\r\n        (ch >= 48 && ch <= 57) ||         // 0..9\r\n        ((ch >= 0x80) && NonAsciiIdentifierPartOnly.test(fromCodePoint(ch)));\r\n    }\r\n\r\n    function parseIdentityEscape() {\r\n      // IdentityEscape ::\r\n      //      [+U] SyntaxCharacter\r\n      //      [+U] /\r\n      //      [~U] SourceCharacterIdentityEscape[?N]\r\n      // SourceCharacterIdentityEscape[?N] ::\r\n      //      [~N] SourceCharacter but not c\r\n      //      [+N] SourceCharacter but not one of c or k\r\n\r\n\r\n      var tmp;\r\n      var l = lookahead();\r\n      if (\r\n        (hasUnicodeFlag && /[\\^\\$\\.\\*\\+\\?\\(\\)\\\\\\[\\]\\{\\}\\|\\/]/.test(l)) ||\r\n        (!hasUnicodeFlag && l !== \"c\")\r\n      ) {\r\n        if (l === \"k\" && features.lookbehind) {\r\n          return null;\r\n        }\r\n        tmp = incr();\r\n        return createEscaped('identifier', tmp.charCodeAt(0), tmp, 1);\r\n      }\r\n\r\n      return null;\r\n    }\r\n\r\n    function parseCharacterClass() {\r\n      // CharacterClass ::\r\n      //      [ [lookahead ∉ {^}] ClassRanges ]\r\n      //      [ ^ ClassRanges ]\r\n\r\n      var res, from = pos;\r\n      if (res = matchReg(/^\\[\\^/)) {\r\n        res = parseClassRanges();\r\n        skip(']');\r\n        return createCharacterClass(res, true, from, pos);\r\n      } else if (match('[')) {\r\n        res = parseClassRanges();\r\n        skip(']');\r\n        return createCharacterClass(res, false, from, pos);\r\n      }\r\n\r\n      return null;\r\n    }\r\n\r\n    function parseClassRanges() {\r\n      // ClassRanges ::\r\n      //      [empty]\r\n      //      NonemptyClassRanges\r\n\r\n      var res;\r\n      if (current(']')) {\r\n        // Empty array means nothing insinde of the ClassRange.\r\n        return [];\r\n      } else {\r\n        res = parseNonemptyClassRanges();\r\n        if (!res) {\r\n          bail('nonEmptyClassRanges');\r\n        }\r\n        return res;\r\n      }\r\n    }\r\n\r\n    function parseHelperClassRanges(atom) {\r\n      var from, to, res, atomTo, dash;\r\n      if (current('-') && !next(']')) {\r\n        // ClassAtom - ClassAtom ClassRanges\r\n        from = atom.range[0];\r\n        dash = createCharacter(match('-'));\r\n\r\n        atomTo = parseClassAtom();\r\n        if (!atomTo) {\r\n          bail('classAtom');\r\n        }\r\n        to = pos;\r\n\r\n        // Parse the next class range if exists.\r\n        var classRanges = parseClassRanges();\r\n        if (!classRanges) {\r\n          bail('classRanges');\r\n        }\r\n\r\n        // Check if both the from and atomTo have codePoints.\r\n        if (!('codePoint' in atom) || !('codePoint' in atomTo)) {\r\n            if (!hasUnicodeFlag) {\r\n                // If not, don't create a range but treat them as\r\n                // `atom` `-` `atom` instead.\r\n                //\r\n                // SEE: https://tc39.es/ecma262/#sec-regular-expression-patterns-semantics\r\n                //   NonemptyClassRanges::ClassAtom-ClassAtomClassRanges\r\n                //   CharacterRangeOrUnion\r\n                res = [atom, dash, atomTo];\r\n            } else {\r\n                // With unicode flag, both sides must have codePoints if\r\n                // one side has a codePoint.\r\n                //\r\n                // SEE: https://tc39.es/ecma262/#sec-patterns-static-semantics-early-errors\r\n                //   NonemptyClassRanges :: ClassAtom - ClassAtom ClassRanges\r\n                bail('invalid character class');\r\n            }\r\n        } else {\r\n            res = [createClassRange(atom, atomTo, from, to)];\r\n        }\r\n\r\n        if (classRanges.type === 'empty') {\r\n          return res;\r\n        }\r\n        return res.concat(classRanges);\r\n      }\r\n\r\n      res = parseNonemptyClassRangesNoDash();\r\n      if (!res) {\r\n        bail('nonEmptyClassRangesNoDash');\r\n      }\r\n\r\n      return [atom].concat(res);\r\n    }\r\n\r\n    function parseNonemptyClassRanges() {\r\n      // NonemptyClassRanges ::\r\n      //      ClassAtom\r\n      //      ClassAtom NonemptyClassRangesNoDash\r\n      //      ClassAtom - ClassAtom ClassRanges\r\n\r\n      var atom = parseClassAtom();\r\n      if (!atom) {\r\n        bail('classAtom');\r\n      }\r\n\r\n      if (current(']')) {\r\n        // ClassAtom\r\n        return [atom];\r\n      }\r\n\r\n      // ClassAtom NonemptyClassRangesNoDash\r\n      // ClassAtom - ClassAtom ClassRanges\r\n      return parseHelperClassRanges(atom);\r\n    }\r\n\r\n    function parseNonemptyClassRangesNoDash() {\r\n      // NonemptyClassRangesNoDash ::\r\n      //      ClassAtom\r\n      //      ClassAtomNoDash NonemptyClassRangesNoDash\r\n      //      ClassAtomNoDash - ClassAtom ClassRanges\r\n\r\n      var res = parseClassAtom();\r\n      if (!res) {\r\n        bail('classAtom');\r\n      }\r\n      if (current(']')) {\r\n        //      ClassAtom\r\n        return res;\r\n      }\r\n\r\n      // ClassAtomNoDash NonemptyClassRangesNoDash\r\n      // ClassAtomNoDash - ClassAtom ClassRanges\r\n      return parseHelperClassRanges(res);\r\n    }\r\n\r\n    function parseClassAtom() {\r\n      // ClassAtom ::\r\n      //      -\r\n      //      ClassAtomNoDash\r\n      if (match('-')) {\r\n        return createCharacter('-');\r\n      } else {\r\n        return parseClassAtomNoDash();\r\n      }\r\n    }\r\n\r\n    function parseClassAtomNoDash() {\r\n      // ClassAtomNoDash ::\r\n      //      SourceCharacter but not one of \\ or ] or -\r\n      //      \\ ClassEscape\r\n\r\n      var res;\r\n      if (res = matchReg(/^[^\\\\\\]-]/)) {\r\n        return createCharacter(res[0]);\r\n      } else if (match('\\\\')) {\r\n        res = parseClassEscape();\r\n        if (!res) {\r\n          bail('classEscape');\r\n        }\r\n\r\n        return parseUnicodeSurrogatePairEscape(res);\r\n      }\r\n    }\r\n\r\n    function bail(message, details, from, to) {\r\n      from = from == null ? pos : from;\r\n      to = to == null ? from : to;\r\n\r\n      var contextStart = Math.max(0, from - 10);\r\n      var contextEnd = Math.min(to + 10, str.length);\r\n\r\n      // Output a bit of context and a line pointing to where our error is.\r\n      //\r\n      // We are assuming that there are no actual newlines in the content as this is a regular expression.\r\n      var context = '    ' + str.substring(contextStart, contextEnd);\r\n      var pointer = '    ' + new Array(from - contextStart + 1).join(' ') + '^';\r\n\r\n      throw SyntaxError(message + ' at position ' + from + (details ? ': ' + details : '') + '\\n' + context + '\\n' + pointer);\r\n    }\r\n\r\n    var backrefDenied = [];\r\n    var closedCaptureCounter = 0;\r\n    var firstIteration = true;\r\n    var hasUnicodeFlag = (flags || \"\").indexOf(\"u\") !== -1;\r\n    var pos = 0;\r\n\r\n    // Convert the input to a string and treat the empty string special.\r\n    str = String(str);\r\n    if (str === '') {\r\n      str = '(?:)';\r\n    }\r\n\r\n    var result = parseDisjunction();\r\n\r\n    if (result.range[1] !== str.length) {\r\n      bail('Could not parse entire input - got stuck', '', result.range[1]);\r\n    }\r\n\r\n    // The spec requires to interpret the `\\2` in `/\\2()()/` as backreference.\r\n    // As the parser collects the number of capture groups as the string is\r\n    // parsed it is impossible to make these decisions at the point when the\r\n    // `\\2` is handled. In case the local decision turns out to be wrong after\r\n    // the parsing has finished, the input string is parsed a second time with\r\n    // the total number of capture groups set.\r\n    //\r\n    // SEE: https://github.com/jviereck/regjsparser/issues/70\r\n    for (var i = 0; i < backrefDenied.length; i++) {\r\n      if (backrefDenied[i] <= closedCaptureCounter) {\r\n        // Parse the input a second time.\r\n        pos = 0;\r\n        firstIteration = false;\r\n        return parseDisjunction();\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  var regjsparser = {\r\n    parse: parse\r\n  };\r\n\r\n  if (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = regjsparser;\r\n  } else {\r\n    window.regjsparser = regjsparser;\r\n  }\r\n\r\n}());\r\n"]},"metadata":{},"sourceType":"script"}