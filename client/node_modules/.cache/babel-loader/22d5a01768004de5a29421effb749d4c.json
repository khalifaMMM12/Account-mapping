{"ast":null,"code":"import { useEffect } from 'react';\nimport useEventCallback from './useEventCallback';\n/**\r\n * Attaches an event handler outside directly to specified DOM element\r\n * bypassing the react synthetic event system.\r\n *\r\n * @param element The target to listen for events on\r\n * @param event The DOM event name\r\n * @param handler An event handler\r\n * @param capture Whether or not to listen during the capture event phase\r\n */\n\nexport default function useEventListener(eventTarget, event, listener) {\n  let capture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const handler = useEventCallback(listener);\n  useEffect(() => {\n    const target = typeof eventTarget === 'function' ? eventTarget() : eventTarget;\n    target.addEventListener(event, handler, capture);\n    return () => target.removeEventListener(event, handler, capture);\n  }, [eventTarget]);\n}","map":{"version":3,"sources":["C:/Users/DEV. mmm/Documents/projects/Premium Pension/Agent mapping/Account-mapping/client/node_modules/@restart/ui/node_modules/@restart/hooks/esm/useEventListener.js"],"names":["useEffect","useEventCallback","useEventListener","eventTarget","event","listener","capture","handler","target","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,gBAAT,CAA0BC,WAA1B,EAAuCC,KAAvC,EAA8CC,QAA9C,EAAyE;AAAA,MAAjBC,OAAiB,uEAAP,KAAO;AACtF,QAAMC,OAAO,GAAGN,gBAAgB,CAACI,QAAD,CAAhC;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,MAAM,GAAG,OAAOL,WAAP,KAAuB,UAAvB,GAAoCA,WAAW,EAA/C,GAAoDA,WAAnE;AACAK,IAAAA,MAAM,CAACC,gBAAP,CAAwBL,KAAxB,EAA+BG,OAA/B,EAAwCD,OAAxC;AACA,WAAO,MAAME,MAAM,CAACE,mBAAP,CAA2BN,KAA3B,EAAkCG,OAAlC,EAA2CD,OAA3C,CAAb;AACD,GAJQ,EAIN,CAACH,WAAD,CAJM,CAAT;AAKD","sourcesContent":["import { useEffect } from 'react';\r\nimport useEventCallback from './useEventCallback';\r\n/**\r\n * Attaches an event handler outside directly to specified DOM element\r\n * bypassing the react synthetic event system.\r\n *\r\n * @param element The target to listen for events on\r\n * @param event The DOM event name\r\n * @param handler An event handler\r\n * @param capture Whether or not to listen during the capture event phase\r\n */\r\nexport default function useEventListener(eventTarget, event, listener, capture = false) {\r\n  const handler = useEventCallback(listener);\r\n  useEffect(() => {\r\n    const target = typeof eventTarget === 'function' ? eventTarget() : eventTarget;\r\n    target.addEventListener(event, handler, capture);\r\n    return () => target.removeEventListener(event, handler, capture);\r\n  }, [eventTarget]);\r\n}"]},"metadata":{},"sourceType":"module"}